
<!--  -->
<template>
  <view class='search-box'>
      <icon type="search" size="16">
      </icon>
      <input @input="searchValue" type="text" placeholder="请输入" value="{{inputValue}}">
      <button @tap="getValue" hidden="{{ishidden}}">搜索</button>
  </view>
  <view class="history-box" hidden="{{!switchover}}">
      <view class="history-title">
          <text>历史搜索</text>
          <text @tap="clearHistory" class="del">x</text>
      </view>
      <view class="history-content">
          <block wx:for="{{historyValue}}">
              <view @tap="toinput({{item}})" class="item">{{item}}</view>
          </block>
      </view>
  </view>
  <view class="product" hidden="{{switchover}}">
    <view class="product-title">
        <view @tap="changeBar({{0}})"  class="items {{selectIndex==0?'active':''}}">综合</view>
        <view @tap="changeBar({{1}})" class="items {{selectIndex==1?'active':''}}">销量</view>
        <view @tap="changeBar({{2}})" class="items {{selectIndex==2?'active':''}}">价格</view>
    </view>
    <view class="product-content">
        <block wx:for="{{productList}}">
            <view class="item" data-id="{{item.goods_id}}" @tap="todetail({{item.goods_id}})">
                <view class="left">
                    <image src="{{item.goods_small_logo}}"></image>
                </view>
                <view class="right">
                    <view class="state">{{item.goods_name}}</view>
                    <view class="price">￥<text>{{item.goods_price}}</text>.00</view>
                </view>
            </view>
        </block>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
//调用抽取的函数
var method = require('../utils/func.js')
export default class Search extends wepy.page {
  config = {
    navigationBarTitleText: '搜索'
  }

  data = {
    //判断搜索按钮
    ishidden: true,
    //input的值
    inputValue: '',
    //历史值数组
    historyValue: [],
    //判断搜索历史还是商品界面
    switchover: true,
    //商品的数据
    productList: [],
    //有active的索引
    selectIndex: 0,
    //升序降序的设定
    priceSort:true
    
  }

  components = {}

  methods = {
    //显示隐藏搜索按钮
    searchValue(e) {
      //   console.log(e)
      if (e.detail.value.trim() == '') {
        this.ishidden = true
      } else {
        this.ishidden = false
      }
      this.inputValue = e.detail.value.trim()
    },
    //点击搜索把记录添加金storage
    getValue() {
      console.log(this.inputValue)
      //判断内容是否相等，把相等的删除重新添加最新输入内容
      var result = this.historyValue.indexOf(this.inputValue)
      // console.log(result)
      if (result != -1) {
        this.historyValue.splice(result, 1)
      }
      //判断历史记录的个数
      if (this.historyValue.length >= 8) {
        this.historyValue.splice(0, 1)
      }
      //把搜索的内容push进取，得到最新的数组
      this.historyValue.push(this.inputValue)
      wx.setStorage({
        key: 'search',
        data: this.historyValue
      })
      //让用户等待一下。加载中
      wx.showLoading({
        title: '加载中',
        mask: true
      })
      //调用接口，获取数据渲染
      method.request({
        url: 'api/public/v1/goods/search',
        data: {
          query: this.inputValue
        },
        success: res => {
          console.log(res)
          wx.hideLoading()
          //显示另一处内容
          this.switchover = false
          this.productList = res.data.message.goods
          this.$apply()
        }
      })
    },
    //清除历史记录和storage
    clearHistory() {
      this.historyValue = []
      wx.removeStorage({
        key: 'search'
      })
    },
    //把历史值赋给input中的value
    toinput(res) {
      // console.log(res)
      this.inputValue = res
      this.ishidden = false
    },
    //tabel栏切换
    changeBar(index) {
      // console.log(e)
      this.selectIndex = index
      // 根据索引判断点击的选项
      switch (index) {
        case 0:
          break
        case 1:
          this.productList.sort((a,b)=>{
            return a.goods_id - b.goods_id
          })
          break
        case 2:
        //取反改变升序和降序
          this.priceSort != this.priceSort;
          this.productList.sort((a,b)=>{
            if(this.priceSort){
              return a.goods_price - b.goods_price;
            }else{
              return b.goods_price - a.goods_price;
            }
          })
          break
      }
    },
    //跳转到详情页面
    todetail(goods_id) {
      wx.navigateTo({
        url: '/pages/detail?id=' + goods_id
      })
    }
  }

  events = {}

  watch = {}

  computed = {}

  onLoad() {
    wx.getStorage({
      key: 'search',
      success: res => {
        console.log(res)
        this.historyValue = res.data
        this.$apply()
      },
      fail: res => {
        console.log(res)
        this.historyValue = []
        this.$apply()
      }
    })
  }

  onShow() {}
}
</script>

<style lang='less'>
.search-box {
  height: 120rpx;
  padding: 30rpx 16rpx;
  box-sizing: border-box;
  background-color: #eeeeee;
  display: flex;
  align-items: center;
  position: relative;

  icon {
    z-index: 999;
    left: 40rpx;
    position: absolute;
  }
  input {
    padding-left: 70rpx;
    font-size: 28rpx;

    border-radius: 8rpx;
    height: 60rpx;
    flex: 1;
    background-color: #fff;
  }
  button {
    margin-left: 20rpx;
    width: 160rpx;
    height: 60rpx;
    font-size: 32rpx;
    text-align: center;
    line-height: 60rpx;
  }
}
.history-box {
  padding: 0 16rpx;
  .history-title {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 30rpx;
    padding: 28rpx 0 32rpx 0;
    .del {
      display: block;
      width: 30rpx;
      height: 30rpx;
      background-color: #ccc;
      color: #fff;
      border-radius: 50%;
      line-height: 30rpx;
      text-align: center;
      margin-right: 15rpx;
    }
  }
  .history-content {
    display: flex;
    flex-wrap: wrap;
    .item {
      margin-right: 30rpx;
      margin-bottom: 18rpx;
      padding: 20rpx 25rpx;
      background-color: #dddddd;
      display: block;
      font-size: 26rpx;
    }
  }
}
.product {
  .product-title {
    display: flex;
    border-bottom: 1rpx solid #eeeeee;
    .items {
      height: 100rpx;
      line-height: 100rpx;
      text-align: center;
      flex: 1;
      font-size: 30rpx;
      &.active {
        color: #ff2d4a;
      }
    }
  }
  .product-content {
    padding: 0 20rpx;
    .item {
      display: flex;
      height: 260rpx;
      border-bottom: 1rpx solid #eeeeee;
      .left {
        padding: 30rpx 0;
        image {
          display: block;
          width: 200rpx;
          height: 200rpx;
        }
      }
      .right {
        padding: 35rpx 0;
        box-sizing: border-box;
        margin-left: 28rpx;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        .state {
          font-size: 30rpx;
        }
        .price {
          font-size: 26rpx;
          color: #ff2d4a;
          text {
            font-size: 34rpx;
          }
        }
      }
    }
  }
}
</style>
